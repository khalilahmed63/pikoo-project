import { useEffect, useState } from "react";
import Head from "next/head";
import Inputfield from "../components/Inputfield";
import Btn from "../components/Btn";
import Link from "next/link";
import { useTranslation } from "react-i18next";
import { useFormik } from "formik";
import * as yup from "yup";
import { useDispatch, useSelector } from "react-redux";
import { useRouter } from "next/router";
import PrimaryModal from "../components/PrimaryModal";
import axios from "axios";


import client from "../utils/client";
import {
  selectRequestId,
  setRequestId,
} from "../redux/features/mobileInputs/requestIdSlice";
import { selectCustomerId } from "../redux/features/mobileInputs/customerIdSlice";

const ConfirmOtp = () => {
  let [check, setCheck] = useState(60);
  const dispatch = useDispatch();
  const router = useRouter();
  const { t, i18n } = useTranslation();
  const { requestId } = useSelector(selectRequestId);
  const [status, setstatus] = useState(false);
  const { customerId } = useSelector(selectCustomerId);

  let ip: string = "";

  const getMyIp = () => {
    axios
      .get("https://api.ipify.org/?format=json")
      .then(function (response) {
        ip = response && response.data.ip;
        // console.log(ip, 'ip');
      })
      .catch(function (error) {
        // handle error
        if (error.code === 'ERR_NETWORK') {
          // console.log("Network Error");
        }
      })
      .then(function () {
        // always executed
      });
  };

  if (!requestId) {
    typeof window !== 'undefined' && router.push('/');
    // console.log("empty requestId");
  }

  const confirmOtp = (requestId: string, code: string) => {
    client
      .post("api/v1/registration/sms/confirm", {
        requestId,
        code,
      })
      .then((res) => {
        // console.log(res);
        if (res.status === 200) {
          setstatus(true);
        }
      })
      .catch((err) => {
        console.log(err);
      });
  };

  const requestSms = (customerId: string) => {
    client
      .post("api/v1/registration/sms/request", {
        customerId,
        ip,
      },)
      .then((res) => {
        // console.log(res);
        if (res.status === 200) {
          dispatch(setRequestId(res.data.requestId));
        }
      })
      .catch((err) => {
        console.log(err);
      });
  };

  useEffect(() => {
    getMyIp();
    const id = setInterval(() => {
      setCheck(check - 1);
    }, 1000);
    if (check < 0) {
      clearInterval(id);
    }
    return () => clearInterval(id);
  }, [check]);

  function startCountdown() {
    requestSms(requestId);
    setCheck(60);
  }

  // yup schema
  const registerSchema = yup.object().shape({
    code: yup.number().required("Enter the code").min(4, "Must be 4 numbers"),
  });
  // yup schema

  const formik = useFormik({
    initialValues: {
      code: "",
    },
    onSubmit: ({ code }) => {
      //   alert(JSON.stringify({ code }, null, 2));
      confirmOtp(requestId, code);
    },
    validationSchema: registerSchema,
  });

  return (
    <div className="min-h-screen bg-gradient-to-b from-[#08115d] to-[#95bf5c]  items-center grid grid-cols-1 place-content-center">
      <Head>
        <title>OTP Confirm</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* modal start */}
      <PrimaryModal
        display={status ? "" : "hidden"}
        text="User Account Created Successfully Please Confirm The email and Login to the Account"
      >
        <div className="flex w-full justify-center">
          <Link href={`/login`}>
            <Btn innertext={`login`} />
          </Link>
        </div>
      </PrimaryModal>
      {/* modal end */}
      <div className="flex justify-center ">
        <div className="">
          <div className="flex justify-center pb-8 pt-2">
            <img className="logo" src="/pikoo-logo.png" />
          </div>
          <div className="max-w-md w-full sm:w-96 bg-white rounded-lg  shadow-md ">
            <h5 className="text-base p-3 font-medium text-gray-900 bg-[#c5f177] text-center rounded-tl-lg rounded-tr-lg shadow-md">
              {`${t("common:phonevarification")}`}
            </h5>
            <div className="sm:pt-0 px-10 sm:px-10 md:px-8">
              <form
                className="space-y-4 pt-8"
                onSubmit={formik.handleSubmit}
                method="post"
              >
                <div className="grid grid-cols-1 sm:grid-cols-3">
                  <div className="font-bold p-0 m-0 text-center">
                    {`${t("common:codesms")}`}
                  </div>
                  <div className="px-2">
                    <Inputfield
                      label={""}
                      htmlFor={"code"}
                      name="code"
                      id="code"
                      type="number"
                      onChange={formik.handleChange}
                      value={formik.values.code}
                    />
                  </div>
                  <div className="text-center">
                    {check > -1 ? (
                      <p>{check}</p>
                    ) : (
                      <p
                        className="underline cursor-pointer"
                        onClick={() => startCountdown()}
                      >
                        {`${t("common:askagain")}`}
                      </p>
                    )}
                  </div>
                </div>
                {formik.errors.code && formik.touched.code && (
                  <div className="block h-3 text-center text-xs font-medium text-red-600">
                    {formik.errors.code}
                  </div>
                )}
                <div className=" sm:px-8 pb-6 items-center text-center">
                  <button
                    type="submit"
                    disabled={formik.values.code==='' ? true : false}
                    className={`${formik.values.code==='' ? "text-gray-500" : "hover:shadow shadow-lg "} text-dark bg-[#c5f177]  focus:ring-4 focus:outline-none font-medium rounded-lg text-sm px-16 py-2  text-center`}
                  >{`${t("common:confirm")}`}</button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ConfirmOtp;
